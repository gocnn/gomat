// Code generated by command: go run mulconst_asm.go -bits 64 -out ../../mat/mulconst_amd64.s -stubs ../../mat/mulconst_amd64.go -pkg mat. DO NOT EDIT.

//go:build amd64 && gc && !noasm && !gccgo

#include "textflag.h"

// func MulConstAVX(c float64, x []float64, y []float64)
// Requires: AVX, AVX2, SSE2
TEXT ·MulConstAVX(SB), NOSPLIT, $0-56
	MOVSD        c+0(FP), X0
	MOVQ         x_base+8(FP), AX
	MOVQ         y_base+32(FP), CX
	MOVQ         x_len+16(FP), DX
	VBROADCASTSD X0, Y1

unrolledLoop14:
	CMPQ    DX, $0x00000038
	JL      unrolledLoop8
	VMULPD  (AX), Y1, Y2
	VMULPD  32(AX), Y1, Y3
	VMULPD  64(AX), Y1, Y4
	VMULPD  96(AX), Y1, Y5
	VMULPD  128(AX), Y1, Y6
	VMULPD  160(AX), Y1, Y7
	VMULPD  192(AX), Y1, Y8
	VMULPD  224(AX), Y1, Y9
	VMULPD  256(AX), Y1, Y10
	VMULPD  288(AX), Y1, Y11
	VMULPD  320(AX), Y1, Y12
	VMULPD  352(AX), Y1, Y13
	VMULPD  384(AX), Y1, Y14
	VMULPD  416(AX), Y1, Y15
	VMOVUPD Y2, (CX)
	VMOVUPD Y3, 32(CX)
	VMOVUPD Y4, 64(CX)
	VMOVUPD Y5, 96(CX)
	VMOVUPD Y6, 128(CX)
	VMOVUPD Y7, 160(CX)
	VMOVUPD Y8, 192(CX)
	VMOVUPD Y9, 224(CX)
	VMOVUPD Y10, 256(CX)
	VMOVUPD Y11, 288(CX)
	VMOVUPD Y12, 320(CX)
	VMOVUPD Y13, 352(CX)
	VMOVUPD Y14, 384(CX)
	VMOVUPD Y15, 416(CX)
	ADDQ    $0x000001c0, AX
	ADDQ    $0x000001c0, CX
	SUBQ    $0x00000038, DX
	JMP     unrolledLoop14

unrolledLoop8:
	CMPQ    DX, $0x00000020
	JL      unrolledLoop4
	VMULPD  (AX), Y1, Y2
	VMULPD  32(AX), Y1, Y3
	VMULPD  64(AX), Y1, Y4
	VMULPD  96(AX), Y1, Y5
	VMULPD  128(AX), Y1, Y6
	VMULPD  160(AX), Y1, Y7
	VMULPD  192(AX), Y1, Y8
	VMULPD  224(AX), Y1, Y9
	VMOVUPD Y2, (CX)
	VMOVUPD Y3, 32(CX)
	VMOVUPD Y4, 64(CX)
	VMOVUPD Y5, 96(CX)
	VMOVUPD Y6, 128(CX)
	VMOVUPD Y7, 160(CX)
	VMOVUPD Y8, 192(CX)
	VMOVUPD Y9, 224(CX)
	ADDQ    $0x00000100, AX
	ADDQ    $0x00000100, CX
	SUBQ    $0x00000020, DX
	JMP     unrolledLoop8

unrolledLoop4:
	CMPQ    DX, $0x00000010
	JL      unrolledLoop1
	VMULPD  (AX), Y1, Y2
	VMULPD  32(AX), Y1, Y3
	VMULPD  64(AX), Y1, Y4
	VMULPD  96(AX), Y1, Y5
	VMOVUPD Y2, (CX)
	VMOVUPD Y3, 32(CX)
	VMOVUPD Y4, 64(CX)
	VMOVUPD Y5, 96(CX)
	ADDQ    $0x00000080, AX
	ADDQ    $0x00000080, CX
	SUBQ    $0x00000010, DX
	JMP     unrolledLoop4

unrolledLoop1:
	CMPQ    DX, $0x00000004
	JL      tailLoop
	VMULPD  (AX), Y1, Y2
	VMOVUPD Y2, (CX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	SUBQ    $0x00000004, DX
	JMP     unrolledLoop1

tailLoop:
	CMPQ  DX, $0x00000000
	JE    end
	MOVSD (AX), X1
	MULSD X0, X1
	MOVSD X1, (CX)
	ADDQ  $0x00000008, AX
	ADDQ  $0x00000008, CX
	DECQ  DX
	JMP   tailLoop

end:
	RET

// func MulConstSSE(c float64, x []float64, y []float64)
// Requires: SSE2
TEXT ·MulConstSSE(SB), NOSPLIT, $0-56
	MOVSD  c+0(FP), X0
	MOVQ   x_base+8(FP), AX
	MOVQ   y_base+32(FP), CX
	MOVQ   x_len+16(FP), DX
	SHUFPD $0x00, X0, X0

unrolledLoop14:
	CMPQ   DX, $0x0000001c
	JL     unrolledLoop8
	MOVUPD (AX), X1
	MOVUPD 16(AX), X2
	MOVUPD 32(AX), X3
	MOVUPD 48(AX), X4
	MOVUPD 64(AX), X5
	MOVUPD 80(AX), X6
	MOVUPD 96(AX), X7
	MOVUPD 112(AX), X8
	MOVUPD 128(AX), X9
	MOVUPD 144(AX), X10
	MOVUPD 160(AX), X11
	MOVUPD 176(AX), X12
	MOVUPD 192(AX), X13
	MOVUPD 208(AX), X14
	MULPD  X0, X1
	MULPD  X0, X2
	MULPD  X0, X3
	MULPD  X0, X4
	MULPD  X0, X5
	MULPD  X0, X6
	MULPD  X0, X7
	MULPD  X0, X8
	MULPD  X0, X9
	MULPD  X0, X10
	MULPD  X0, X11
	MULPD  X0, X12
	MULPD  X0, X13
	MULPD  X0, X14
	MOVUPD X1, (CX)
	MOVUPD X2, 16(CX)
	MOVUPD X3, 32(CX)
	MOVUPD X4, 48(CX)
	MOVUPD X5, 64(CX)
	MOVUPD X6, 80(CX)
	MOVUPD X7, 96(CX)
	MOVUPD X8, 112(CX)
	MOVUPD X9, 128(CX)
	MOVUPD X10, 144(CX)
	MOVUPD X11, 160(CX)
	MOVUPD X12, 176(CX)
	MOVUPD X13, 192(CX)
	MOVUPD X14, 208(CX)
	ADDQ   $0x000000e0, AX
	ADDQ   $0x000000e0, CX
	SUBQ   $0x0000001c, DX
	JMP    unrolledLoop14

unrolledLoop8:
	CMPQ   DX, $0x00000010
	JL     unrolledLoop4
	MOVUPD (AX), X1
	MOVUPD 16(AX), X2
	MOVUPD 32(AX), X3
	MOVUPD 48(AX), X4
	MOVUPD 64(AX), X5
	MOVUPD 80(AX), X6
	MOVUPD 96(AX), X7
	MOVUPD 112(AX), X8
	MULPD  X0, X1
	MULPD  X0, X2
	MULPD  X0, X3
	MULPD  X0, X4
	MULPD  X0, X5
	MULPD  X0, X6
	MULPD  X0, X7
	MULPD  X0, X8
	MOVUPD X1, (CX)
	MOVUPD X2, 16(CX)
	MOVUPD X3, 32(CX)
	MOVUPD X4, 48(CX)
	MOVUPD X5, 64(CX)
	MOVUPD X6, 80(CX)
	MOVUPD X7, 96(CX)
	MOVUPD X8, 112(CX)
	ADDQ   $0x00000080, AX
	ADDQ   $0x00000080, CX
	SUBQ   $0x00000010, DX
	JMP    unrolledLoop8

unrolledLoop4:
	CMPQ   DX, $0x00000008
	JL     unrolledLoop1
	MOVUPD (AX), X1
	MOVUPD 16(AX), X2
	MOVUPD 32(AX), X3
	MOVUPD 48(AX), X4
	MULPD  X0, X1
	MULPD  X0, X2
	MULPD  X0, X3
	MULPD  X0, X4
	MOVUPD X1, (CX)
	MOVUPD X2, 16(CX)
	MOVUPD X3, 32(CX)
	MOVUPD X4, 48(CX)
	ADDQ   $0x00000040, AX
	ADDQ   $0x00000040, CX
	SUBQ   $0x00000008, DX
	JMP    unrolledLoop4

unrolledLoop1:
	CMPQ   DX, $0x00000002
	JL     tailLoop
	MOVUPD (AX), X1
	MULPD  X0, X1
	MOVUPD X1, (CX)
	ADDQ   $0x00000010, AX
	ADDQ   $0x00000010, CX
	SUBQ   $0x00000002, DX
	JMP    unrolledLoop1

tailLoop:
	CMPQ  DX, $0x00000000
	JE    end
	MOVSD (AX), X1
	MULSD X0, X1
	MOVSD X1, (CX)
	ADDQ  $0x00000008, AX
	ADDQ  $0x00000008, CX
	DECQ  DX
	JMP   tailLoop

end:
	RET
