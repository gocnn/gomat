// Code generated by command: go run mulconst_asm.go -bits 32 -out ../../mat32/mulconst_amd64.s -stubs ../../mat32/mulconst_amd64.go -pkg mat32. DO NOT EDIT.

//go:build amd64 && gc && !noasm && !gccgo

#include "textflag.h"

// func MulConstAVX(c float32, x []float32, y []float32)
// Requires: AVX, AVX2, SSE
TEXT ·MulConstAVX(SB), NOSPLIT, $0-56
	MOVSS        c+0(FP), X0
	MOVQ         x_base+8(FP), AX
	MOVQ         y_base+32(FP), CX
	MOVQ         x_len+16(FP), DX
	VBROADCASTSS X0, Y1

unrolledLoop14:
	CMPQ    DX, $0x00000070
	JL      unrolledLoop8
	VMULPS  (AX), Y1, Y2
	VMULPS  32(AX), Y1, Y3
	VMULPS  64(AX), Y1, Y4
	VMULPS  96(AX), Y1, Y5
	VMULPS  128(AX), Y1, Y6
	VMULPS  160(AX), Y1, Y7
	VMULPS  192(AX), Y1, Y8
	VMULPS  224(AX), Y1, Y9
	VMULPS  256(AX), Y1, Y10
	VMULPS  288(AX), Y1, Y11
	VMULPS  320(AX), Y1, Y12
	VMULPS  352(AX), Y1, Y13
	VMULPS  384(AX), Y1, Y14
	VMULPS  416(AX), Y1, Y15
	VMOVUPS Y2, (CX)
	VMOVUPS Y3, 32(CX)
	VMOVUPS Y4, 64(CX)
	VMOVUPS Y5, 96(CX)
	VMOVUPS Y6, 128(CX)
	VMOVUPS Y7, 160(CX)
	VMOVUPS Y8, 192(CX)
	VMOVUPS Y9, 224(CX)
	VMOVUPS Y10, 256(CX)
	VMOVUPS Y11, 288(CX)
	VMOVUPS Y12, 320(CX)
	VMOVUPS Y13, 352(CX)
	VMOVUPS Y14, 384(CX)
	VMOVUPS Y15, 416(CX)
	ADDQ    $0x000001c0, AX
	ADDQ    $0x000001c0, CX
	SUBQ    $0x00000070, DX
	JMP     unrolledLoop14

unrolledLoop8:
	CMPQ    DX, $0x00000040
	JL      unrolledLoop4
	VMULPS  (AX), Y1, Y2
	VMULPS  32(AX), Y1, Y3
	VMULPS  64(AX), Y1, Y4
	VMULPS  96(AX), Y1, Y5
	VMULPS  128(AX), Y1, Y6
	VMULPS  160(AX), Y1, Y7
	VMULPS  192(AX), Y1, Y8
	VMULPS  224(AX), Y1, Y9
	VMOVUPS Y2, (CX)
	VMOVUPS Y3, 32(CX)
	VMOVUPS Y4, 64(CX)
	VMOVUPS Y5, 96(CX)
	VMOVUPS Y6, 128(CX)
	VMOVUPS Y7, 160(CX)
	VMOVUPS Y8, 192(CX)
	VMOVUPS Y9, 224(CX)
	ADDQ    $0x00000100, AX
	ADDQ    $0x00000100, CX
	SUBQ    $0x00000040, DX
	JMP     unrolledLoop8

unrolledLoop4:
	CMPQ    DX, $0x00000020
	JL      unrolledLoop1
	VMULPS  (AX), Y1, Y2
	VMULPS  32(AX), Y1, Y3
	VMULPS  64(AX), Y1, Y4
	VMULPS  96(AX), Y1, Y5
	VMOVUPS Y2, (CX)
	VMOVUPS Y3, 32(CX)
	VMOVUPS Y4, 64(CX)
	VMOVUPS Y5, 96(CX)
	ADDQ    $0x00000080, AX
	ADDQ    $0x00000080, CX
	SUBQ    $0x00000020, DX
	JMP     unrolledLoop4

unrolledLoop1:
	CMPQ    DX, $0x00000008
	JL      tailLoop
	VMULPS  (AX), Y1, Y2
	VMOVUPS Y2, (CX)
	ADDQ    $0x00000020, AX
	ADDQ    $0x00000020, CX
	SUBQ    $0x00000008, DX
	JMP     unrolledLoop1

tailLoop:
	CMPQ  DX, $0x00000000
	JE    end
	MOVSS (AX), X1
	MULSS X0, X1
	MOVSS X1, (CX)
	ADDQ  $0x00000004, AX
	ADDQ  $0x00000004, CX
	DECQ  DX
	JMP   tailLoop

end:
	RET

// func MulConstSSE(c float32, x []float32, y []float32)
// Requires: SSE
TEXT ·MulConstSSE(SB), NOSPLIT, $0-56
	MOVSS  c+0(FP), X0
	MOVQ   x_base+8(FP), AX
	MOVQ   y_base+32(FP), CX
	MOVQ   x_len+16(FP), DX
	SHUFPS $0x00, X0, X0

unrolledLoop14:
	CMPQ   DX, $0x00000038
	JL     unrolledLoop8
	MOVUPS (AX), X1
	MOVUPS 16(AX), X2
	MOVUPS 32(AX), X3
	MOVUPS 48(AX), X4
	MOVUPS 64(AX), X5
	MOVUPS 80(AX), X6
	MOVUPS 96(AX), X7
	MOVUPS 112(AX), X8
	MOVUPS 128(AX), X9
	MOVUPS 144(AX), X10
	MOVUPS 160(AX), X11
	MOVUPS 176(AX), X12
	MOVUPS 192(AX), X13
	MOVUPS 208(AX), X14
	MULPS  X0, X1
	MULPS  X0, X2
	MULPS  X0, X3
	MULPS  X0, X4
	MULPS  X0, X5
	MULPS  X0, X6
	MULPS  X0, X7
	MULPS  X0, X8
	MULPS  X0, X9
	MULPS  X0, X10
	MULPS  X0, X11
	MULPS  X0, X12
	MULPS  X0, X13
	MULPS  X0, X14
	MOVUPS X1, (CX)
	MOVUPS X2, 16(CX)
	MOVUPS X3, 32(CX)
	MOVUPS X4, 48(CX)
	MOVUPS X5, 64(CX)
	MOVUPS X6, 80(CX)
	MOVUPS X7, 96(CX)
	MOVUPS X8, 112(CX)
	MOVUPS X9, 128(CX)
	MOVUPS X10, 144(CX)
	MOVUPS X11, 160(CX)
	MOVUPS X12, 176(CX)
	MOVUPS X13, 192(CX)
	MOVUPS X14, 208(CX)
	ADDQ   $0x000000e0, AX
	ADDQ   $0x000000e0, CX
	SUBQ   $0x00000038, DX
	JMP    unrolledLoop14

unrolledLoop8:
	CMPQ   DX, $0x00000020
	JL     unrolledLoop4
	MOVUPS (AX), X1
	MOVUPS 16(AX), X2
	MOVUPS 32(AX), X3
	MOVUPS 48(AX), X4
	MOVUPS 64(AX), X5
	MOVUPS 80(AX), X6
	MOVUPS 96(AX), X7
	MOVUPS 112(AX), X8
	MULPS  X0, X1
	MULPS  X0, X2
	MULPS  X0, X3
	MULPS  X0, X4
	MULPS  X0, X5
	MULPS  X0, X6
	MULPS  X0, X7
	MULPS  X0, X8
	MOVUPS X1, (CX)
	MOVUPS X2, 16(CX)
	MOVUPS X3, 32(CX)
	MOVUPS X4, 48(CX)
	MOVUPS X5, 64(CX)
	MOVUPS X6, 80(CX)
	MOVUPS X7, 96(CX)
	MOVUPS X8, 112(CX)
	ADDQ   $0x00000080, AX
	ADDQ   $0x00000080, CX
	SUBQ   $0x00000020, DX
	JMP    unrolledLoop8

unrolledLoop4:
	CMPQ   DX, $0x00000010
	JL     unrolledLoop1
	MOVUPS (AX), X1
	MOVUPS 16(AX), X2
	MOVUPS 32(AX), X3
	MOVUPS 48(AX), X4
	MULPS  X0, X1
	MULPS  X0, X2
	MULPS  X0, X3
	MULPS  X0, X4
	MOVUPS X1, (CX)
	MOVUPS X2, 16(CX)
	MOVUPS X3, 32(CX)
	MOVUPS X4, 48(CX)
	ADDQ   $0x00000040, AX
	ADDQ   $0x00000040, CX
	SUBQ   $0x00000010, DX
	JMP    unrolledLoop4

unrolledLoop1:
	CMPQ   DX, $0x00000004
	JL     tailLoop
	MOVUPS (AX), X1
	MULPS  X0, X1
	MOVUPS X1, (CX)
	ADDQ   $0x00000010, AX
	ADDQ   $0x00000010, CX
	SUBQ   $0x00000004, DX
	JMP    unrolledLoop1

tailLoop:
	CMPQ  DX, $0x00000000
	JE    end
	MOVSS (AX), X1
	MULSS X0, X1
	MOVSS X1, (CX)
	ADDQ  $0x00000004, AX
	ADDQ  $0x00000004, CX
	DECQ  DX
	JMP   tailLoop

end:
	RET
